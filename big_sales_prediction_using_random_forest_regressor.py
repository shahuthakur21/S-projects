# -*- coding: utf-8 -*-
"""Big Sales Prediction using Random Forest Regressor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15J196E9XElkhOqF_91PHgIEwoIgWP679

Big Sales Prediction using Random Forest Regressor

OBJECTIVE -
To predict the expected sales volume for a given product using the Random Forest Regressor algorithm. This will enable businesses to optimize inventory management, marketing strategies, and resource allocation based on accurate sales forecasts.

DATA SOURCE - YBI Foundation - 'https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Big%20Sales%20Data.csv

IMPORTING LIBRARY
"""

import pandas as pd

import numpy as np

"""IMPORT CSV AS DATAFRAME"""

df = pd.read_csv('https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Big%20Sales%20Data.csv')

df.head()

df.info()

df.columns

"""DESCRIBE DATA"""

df.describe()

df['Item_Weight'].fillna(df.groupby(['Item_Type'])['Item_Weight'].transform('mean'),inplace=True)

df.info()

df.describe()

"""Data Visualization

"""

import seaborn as sns
sns.pairplot(df)

df[['Item_Identifier']].value_counts()

df[['Item_Fat_Content']].value_counts()

df.replace({'Item_Fat_Content':{'LF':'Low Fat','reg':'Regular','low fat':'Low Fat'}},inplace=True)

df[['Item_Fat_Content']].value_counts()

df.replace({'Item_Fat_Content':{'Low Fat':0,'Regular':1}},inplace=True)

df[['Item_Type']].value_counts()

df.replace({'Item_Type': {'Fruits and Vegetables':0,'Snack Foods':0,'Household':1,'Frozen Foods':0,'Dairy':0,'Baking Goods':0,'Caned':0,'Health and Hygiene':1,'Meat':0,'Soft Drinks':0,'Breads':0,'Hard Drinks':0,'Others':2,'Starchy Foods':0,'Breakfast':0,'Seafood':0}},inplace=True)

df[['Item_Type']].value_counts()

df[['Outlet_Identifier']].value_counts()

df.replace({'Outlet_Identifier':{'OUT027':0,'OUT013':1,'OUT049':2,'OUT046':3,'OUT035':4,'OUT045':5,'OUT018':6,'OUT017':7,'OUT010':8,'OUT019':9,}},inplace=True)

df[['Outlet_Identifier']].value_counts()

df[['Outlet_Size']].value_counts()

df[['Outlet_Location_Type']].value_counts()

df.replace({'Outlet_Location_Type':{'Tier 1':0,'Tier 2':1,'Tier 3':2}},inplace=True)

df[['Outlet_Location_Type']].value_counts()

df[['Outlet_Type']].value_counts()

df.replace({'Outlet_Type':{'Grocery Store':0,'Supermarket Type1':1,'Supermarket Type2':2,'Supermarket Type3':3}},inplace=True)

df[['Outlet_Type']].value_counts()

df.head()

df.info()

df.shape

"""Define Target Variable (y) and Feature Variables (X)"""

y = df['Item_Outlet_Sales']

y.shape

y

"""Train Test Split

"""

x = df[['Item_Weight','Item_Fat_Content','Item_Visibility','Item_Type','Item_MRP','Outlet_Identifier','Outlet_Establishment_Year','Outlet_Size','Outlet_Location_Type','Outlet_Type']]

x = df.drop(['Item_Identifier','Item_Outlet_Sales'],axis=1)

x.shape

x

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

x_std = df[['Item_Weight','Item_Visibility','Item_MRP','Outlet_Establishment_Year']]

x_std = sc.fit_transform(x_std)

x_std

x[['Item_Weight','Item_Visibility','Item_MRP','Outlet_Establishment_Year']]=pd.DataFrame(x_std,columns=['Item_Weight','Item_Visibility','Item_MRP','Outlet_Establishment_Year'])

x

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1,random_state=2529)

x_train.shape ,x_test.shape ,y_train.shape ,y_test.shape

"""Modeling"""

from sklearn.ensemble import RandomForestRegressor

rfr = RandomForestRegressor(random_state=2529)

rfr = RandomForestRegressor(random_state=2529)

y_train = y_train.astype(str)

x_train = pd.get_dummies(x_train)

x_test = pd.get_dummies(x_test)

"""Model Evaluation

"""

rfr.fit(x_train,y_train)

"""Prediction

"""

y_pred = rfr.predict(x_test)

y_pred.shape

y_pred

from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

mean_squared_error(y_test,y_pred)

mean_absolute_error(y_test,y_pred)

r2_score(y_test,y_pred)

"""Accuracy"""

import matplotlib.pyplot as plt
plt.scatter(y_test,y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Predicted Price")
plt.show()